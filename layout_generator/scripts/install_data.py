#!/usr/bin/env python3

import json
import sys
import os
from datetime import datetime

class InstallData:
    def __init__(self):
        self.setup_logging()
        
    def setup_logging(self):
        """Setup logging to both console and file"""
        # Create logs directory if it doesn't exist
        os.makedirs("logs", exist_ok=True)
        
        # Create log file with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.log_file = f"logs/install_data_{timestamp}.log"
        
        # Redirect stdout to both console and file
        self.original_stdout = sys.stdout
        sys.stdout = self

    def write(self, text):
        """Write to both console and log file"""
        self.original_stdout.write(text)
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(text)

    def flush(self):
        """Flush both console and log file"""
        self.original_stdout.flush()

    def generate_config_mk(self, config_file, output_file):
        """Generate config.mk file from JSON configuration"""
        try:
            # Read JSON configuration
            with open(config_file, 'r') as f:
                config = json.load(f)
            
            # Create output directory if it doesn't exist
            os.makedirs(os.path.dirname(output_file), exist_ok=True)
            
            # Write config.mk file
            with open(output_file, 'w') as f:
                # Write header
                f.write("# Generated by install_data.py\n\n")
                
                # Get required values from config
                design_name = config.get('design', {}).get('design_name', '')
                platform = config.get('design', {}).get('platform', '')
                description = config.get('design', {}).get('description', '')
                clock_cycle = config.get('constraint', {}).get('clock_cycle', '')
                is_combinational = config.get('constraint', {}).get('combinational', False)
                
                # Write the export statements
                f.write(f"DESIGN_NAME = {design_name}\n")
                f.write(f"PLATFORM = {platform}\n")
                f.write(f'DESIGN_DESCRIPTION = "{description}"\n')
                if not is_combinational:
                    f.write(f"CLOCK_CYCLE = {clock_cycle}\n")
            
            print(f"Successfully generated {output_file}")
            return True
            
        except Exception as e:
            print(f"Error generating config.mk: {str(e)}")
            return False

def main():
    # Check if correct number of arguments is provided
    if len(sys.argv) != 3:
        print("Usage: python3 install_data.py <input_json_file> <output_mk_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]

    # Check if input file exists
    if not os.path.exists(input_file):
        print(f"Error: Input file '{input_file}' does not exist")
        sys.exit(1)

    try:
        # Create installer object
        installer = InstallData()
        
        # Generate config.mk
        if not installer.generate_config_mk(input_file, output_file):
            sys.exit(1)
            
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON format in {input_file}: {str(e)}")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
